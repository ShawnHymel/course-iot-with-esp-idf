# Settings
ARG DEBIAN_VERSION=stable-20241223-slim
ARG PASSWORD="mosquitto"
ARG MOSQUITTO_USERNAME="iot"
ARG MOSQUITTO_PASSWORD="mosquitto"
ARG NODE_VERSION=16
ARG NVM_VERSION=0.40.1
ARG MOSQUITTO_VERSION=2.0.20
ARG MQTTX_VERSION=1.11.1

#-------------------------------------------------------------------------------
# Base Image and Dependencies

# Use Debian as the base image
FROM debian:${DEBIAN_VERSION}

# Redeclare arguments after FROM
ARG TARGETARCH
ARG PASSWORD
ARG MOSQUITTO_USERNAME
ARG MOSQUITTO_PASSWORD
ARG NODE_VERSION
ARG NVM_VERSION
ARG MOSQUITTO_VERSION
ARG MQTTX_VERSION

# Set default shell during Docker image build to bash
SHELL ["/bin/bash", "-c"]

# Check if the target architecture is either x86_64 (amd64) or arm64 (aarch64)
RUN if [ "$TARGETARCH" = "amd64" ] || [ "$TARGETARCH" = "arm64" ]; then \
        echo "Architecture $TARGETARCH is supported."; \
    else \
        echo "Unsupported architecture: $TARGETARCH"; \
        exit 1; \
    fi

# Set non-interactive frontend for apt-get to skip any user confirmations
ENV DEBIAN_FRONTEND=noninteractive

# Install base packages
RUN apt-get -y update && \
    apt-get install --no-install-recommends -y \
    procps \
    ca-certificates \
    curl \
    wget \
    unzip \
    nano \
    yarn \
    gdebi-core \
    openssl \
    mosquitto \
    mosquitto-clients

# Clean up
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/*

#-------------------------------------------------------------------------------
# Mosquitto Configuration

# Copy the Mosquitto configuration file
COPY scripts/mosquitto/mosquitto.conf /etc/mosquitto/mosquitto.conf

# Generate the password file with default username and password
COPY scripts/mosquitto/generate_mosquitto_password.sh /generate_mosquitto_password.sh
RUN chmod +x /generate_mosquitto_password.sh && \
    /generate_mosquitto_password.sh ${MOSQUITTO_USERNAME} ${MOSQUITTO_PASSWORD}

# Configure PID file
RUN mkdir -p /run/mosquitto && \
    chown mosquitto:mosquitto /run/mosquitto && \
    chmod 755 /run/mosquitto

# Copy in OpenSSL configuration file
RUN mkdir -p /etc/ssl/
COPY scripts/mosquitto/openssl.cnf /etc/ssl/openssl.cnf

# Generate CA Key and Certificate
RUN openssl genrsa -out /etc/mosquitto/ca_certificates/ca.key 4096 && \
    openssl req \
        -new -x509 -days 36500 \
        -key /etc/mosquitto/ca_certificates/ca.key \
        -out /etc/mosquitto/ca_certificates/ca.crt \
        -subj "/C=US/ST=Colorado/L=Denver/O=mosquitto/CN=custom-ca"

# Generate Server Key and Certificate Signing Request (CSR)
RUN openssl genrsa -out /etc/mosquitto/certs/server.key 4096 && \
    openssl req \
        -new \
        -key /etc/mosquitto/certs/server.key \
        -out /etc/mosquitto/certs/server.csr \
        -config /etc/ssl/openssl.cnf

# Option 1: Generate Server Certificate (expires in 100 years)
RUN openssl x509 \
        -req \
        -CAcreateserial \
        -days 36500 \
        -in /etc/mosquitto/certs/server.csr \
        -CA /etc/mosquitto/ca_certificates/ca.crt \
        -CAkey /etc/mosquitto/ca_certificates/ca.key \
        -out /etc/mosquitto/certs/server.crt \
        -extensions req_ext \
        -extfile /etc/ssl/openssl.cnf && \
    chown -R mosquitto:mosquitto /etc/mosquitto/ca_certificates && \
    chmod 755 /etc/mosquitto/ca_certificates && \
    chmod 644 /etc/mosquitto/ca_certificates/ca.crt && \
    chmod 600 /etc/mosquitto/ca_certificates/ca.key && \
    chown -R mosquitto:mosquitto /etc/mosquitto/certs && \
    chmod 755 /etc/mosquitto/certs && \
    chmod 644 /etc/mosquitto/certs/server.crt && \
    chmod 600 /etc/mosquitto/certs/server.key

# Option 2: Copy existing, pre-generated certificates and key
# COPY scripts/mosquitto/ca.crt /etc/mosquitto/ca_certificates/ca.crt
# COPY scripts/mosquitto/server.crt /etc/mosquitto/certs/server.crt
# COPY scripts/mosquitto/server.key /etc/mosquitto/certs/server.key

#-------------------------------------------------------------------------------
# MQTTX Web

# Install NodeJS
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v${NVM_VERSION}/install.sh | bash && \
    \. "$HOME/.nvm/nvm.sh" && \
    nvm install ${NODE_VERSION} && \
    nvm use ${NODE_VERSION}

# Install MQTTX Web (make sure we have NodeJS and NPM available in our shell)
SHELL ["/bin/bash", "-c"]
RUN cd /tmp && \
    echo 'source $HOME/.nvm/nvm.sh' >> $HOME/.bashrc && \
    source $HOME/.bashrc && \
    npm install -g yarn && \
    npm install -g http-server && \
    wget https://github.com/emqx/MQTTX/archive/refs/tags/v${MQTTX_VERSION}.tar.gz -O mqttx.tar.gz && \
    tar -xf mqttx.tar.gz && \
    cd MQTTX-${MQTTX_VERSION}/web && \
    yarn install && \
    yarn run build && \
    mkdir -p /var/www/mqttx/ && \
    cp -r dist/* /var/www/mqttx/ && \
    rm -rf /tmp/MQTTX-${MQTTX_VERSION} && \
    rm -f /tmp/mqttx.tar.gz

#-------------------------------------------------------------------------------
# Entrypoint

# Custom entrypoint
COPY scripts/mosquitto/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
