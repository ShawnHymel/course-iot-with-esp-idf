# Settings
ARG DEBIAN_VERSION=stable-20241223-slim
ARG PASSWORD="fota"
ARG IDF_VERSION=5.4
ARG VS_CODE_SERVER_VERSION=4.93.1
ARG VS_CODE_SERVER_PORT=8800
ARG VS_CODE_EXT_CPPTOOLS_VERSION=1.22.10
ARG VS_CODE_EXT_HEX_EDITOR_VERSION=1.11.1
ARG VS_CODE_EXT_CMAKETOOLS_VERSION=1.19.52

#-------------------------------------------------------------------------------
# Base Image and Dependencies

# Use Debian as the base image
FROM debian:${DEBIAN_VERSION}

# Redeclare arguments after FROM
ARG PASSWORD
ARG IDF_VERSION
ARG VS_CODE_SERVER_VERSION
ARG VS_CODE_SERVER_PORT
ARG VS_CODE_EXT_CPPTOOLS_VERSION
ARG VS_CODE_EXT_HEX_EDITOR_VERSION
ARG VS_CODE_EXT_CMAKETOOLS_VERSION
ARG TARGETARCH

# Set default shell during Docker image build to bash
SHELL ["/bin/bash", "-c"]

# Check if the target architecture is either x86_64 (amd64) or arm64 (aarch64)
RUN if [ "$TARGETARCH" = "amd64" ] || [ "$TARGETARCH" = "arm64" ]; then \
        echo "Architecture $TARGETARCH is supported."; \
    else \
        echo "Unsupported architecture: $TARGETARCH"; \
        exit 1; \
    fi

# Set non-interactive frontend for apt-get to skip any user confirmations
ENV DEBIAN_FRONTEND=noninteractive

# Install base packages
RUN apt-get -y update && \
	apt-get install --no-install-recommends -y \
    wget \
    curl \
    git \
    openssh-server \
    locales \
    python3 \
    python3-pip \
    python3-venv \
    xz-utils \
    dos2unix \
    vim \
    nano \
    flex \
    bison \
    gperf \
    cmake \
    ninja-build \
    ccache \
    libffi-dev \
    libgcrypt20 \
    libglib2.0-0 \
    libpixman-1-0 \
    libsdl2-2.0-0 \
    libslirp0 \
    libssl-dev \
    libusb-1.0-0

# Set root password
RUN echo "root:${PASSWORD}" | chpasswd

# Clean up stale packages
RUN apt-get clean -y && \
	apt-get autoremove --purge -y && \
	rm -rf /var/lib/apt/lists/*

# Set up directories
RUN mkdir -p /workspace/.vscode && \
    mkdir -p /opt/toolchains

# Set up sshd working directory
RUN mkdir -p /var/run/sshd && \
    chmod 0755 /var/run/sshd

# Allow root login via SSH
RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config

# Expose SSH port
EXPOSE 22

#-------------------------------------------------------------------------------
# ESP-IDF

# Set ESP-IDF environment variables
ENV IDF_VERSION=${IDF_VERSION}
ENV IDF_TOOLS_PATH=/opt/toolchains/espressif

# Download and install ESP-IDF
RUN cd /opt/toolchains && \
    git clone --recursive --branch v${IDF_VERSION} --depth 1 https://github.com/espressif/esp-idf.git && \
    cd esp-idf && \
    ./install.sh all

# Temporarily run ESP-IDF environment to get compiler path (for IntelliSense)
RUN bash && \
    . /opt/toolchains/esp-idf/export.sh && \
    echo "IDF_COMPILER_PATH=$(whereis xtensa-esp-elf-gcc | awk '{print $2}')" >> /etc/environment && \
    exit

# Copy C/C++ IntelliSense configuration
RUN mkdir -p /opt/toolchains/esp-idf/.vscode
COPY scripts/esp-idf/c_cpp_properties.json /c_cpp_properties.json

# Install QEMU (Espressif fork)
RUN python3 /opt/toolchains/esp-idf/tools/idf_tools.py install qemu-xtensa qemu-riscv32

#-------------------------------------------------------------------------------
# VS Code Server

# Set VS Code Server environment variables
ENV VS_CODE_SERVER_VERSION=${VS_CODE_SERVER_VERSION}
ENV VS_CODE_SERVER_PORT=${VS_CODE_SERVER_PORT}

# Install VS Code Server
RUN cd /tmp && \
    wget ${WGET_ARGS} https://code-server.dev/install.sh && \
    chmod +x install.sh && \
    bash install.sh --version ${VS_CODE_SERVER_VERSION}

# Download VS Code extensions (code-server extension manager does not work well)
RUN cd /tmp && \
    if [ "$TARGETARCH" = "amd64" ]; then \
        wget ${WGET_ARGS} https://github.com/microsoft/vscode-cpptools/releases/download/v${VS_CODE_EXT_CPPTOOLS_VERSION}/cpptools-linux-x64.vsix -O cpptools.vsix; \
    elif [ "$TARGETARCH" = "arm64" ]; then \
        wget ${WGET_ARGS} https://github.com/microsoft/vscode-cpptools/releases/download/v${VS_CODE_EXT_CPPTOOLS_VERSION}/cpptools-linux-arm64.vsix -O cpptools.vsix; \
    else \
        echo "Unsupported architecture"; \
        exit 1; \
    fi && \
    wget ${WGET_ARGS} https://github.com/microsoft/vscode-cmake-tools/releases/download/v${VS_CODE_EXT_CMAKETOOLS_VERSION}/cmake-tools.vsix -O cmake-tools.vsix && \
    wget --compression=gzip ${WGET_ARGS} https://marketplace.visualstudio.com/_apis/public/gallery/publishers/ms-vscode/vsextensions/hexeditor/${VS_CODE_EXT_HEX_EDITOR_VERSION}/vspackage -O hexeditor.vsix

# Install extensions
RUN cd /tmp && \
    code-server --install-extension cpptools.vsix && \
    code-server --install-extension cmake-tools.vsix && \
    code-server --install-extension hexeditor.vsix

# Clean up
RUN cd /tmp && \
    rm install.sh && \
    rm cpptools.vsix && \
    rm cmake-tools.vsix && \
    rm hexeditor.vsix

# Copy workspace configuration
COPY scripts/esp-idf/esp-idf.code-workspace /esp-idf.code-workspace

#-------------------------------------------------------------------------------
# Optional Settings

# Initialise system locale (required by menuconfig)
RUN sed -i '/^#.*en_US.UTF-8/s/^#//' /etc/locale.gen && \
    locale-gen en_US.UTF-8 && \
    update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8

#-------------------------------------------------------------------------------
# Entrypoint

# Export environment variables to be system-wide
RUN echo "IDF_TOOLS_PATH=${IDF_TOOLS_PATH}" >> /etc/environment && \
    echo "IDF_VERSION=${IDF_VERSION}" >> /etc/environment

# Copy VS Code settings to ESP-IDF workspace so we don't get submodule warnings
COPY scripts/esp-idf/settings.json /opt/toolchains/esp-idf/.vscode/settings.json

# Add alias to bashrc
RUN echo "alias get_idf='. /opt/toolchains/esp-idf/export.sh'" >> /root/.bashrc && \
    echo "get_idf" >> /root/.bashrc

# Custom entrypoint
COPY scripts/esp-idf/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]